{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pinax Documentation We're just starting to provide overarching documentation for the whole of Pinax to better explain what it is and how to get going with it. While a lot of individual apps have good docs, there's nothing that provides the big picture or help in how the pieces fit together. This documentation is intended to (eventually) serve that purpose. Table of Contents Introduction What is Pinax? Quick Start History FAQs Starter Projects and Apps Pinax Starter Projects Pinax Apps How-tos LDAP Deploying to Heroku Release a Starter Project Development How to Contribute Ways to Contribute Release Process Code of Conduct Pinax in the Wild Colophon These docs live in the https://github.com/pinax/pinax repo and are generated with MkDocs. Please create issues or pull-requests in that repo if you have any suggestions, corrections, or contributions.","title":"Pinax Documentation"},{"location":"#pinax-documentation","text":"We're just starting to provide overarching documentation for the whole of Pinax to better explain what it is and how to get going with it. While a lot of individual apps have good docs, there's nothing that provides the big picture or help in how the pieces fit together. This documentation is intended to (eventually) serve that purpose.","title":"Pinax Documentation"},{"location":"#table-of-contents","text":"Introduction What is Pinax? Quick Start History FAQs Starter Projects and Apps Pinax Starter Projects Pinax Apps How-tos LDAP Deploying to Heroku Release a Starter Project Development How to Contribute Ways to Contribute Release Process Code of Conduct Pinax in the Wild","title":"Table of Contents"},{"location":"#colophon","text":"These docs live in the https://github.com/pinax/pinax repo and are generated with MkDocs. Please create issues or pull-requests in that repo if you have any suggestions, corrections, or contributions.","title":"Colophon"},{"location":"code_of_conduct/","text":"Contributor Code of Conduct As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior by participants include: The use of sexualized language or imagery Personal attacks Trolling or insulting/derogatory comments Public or private harassment Publishing other's private information, such as physical or electronic addresses, without explicit permission Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant, version 1.2.0, available from http://contributor-covenant.org/version/1/2/0/","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-code-of-conduct","text":"As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. We are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. Examples of unacceptable behavior by participants include: The use of sexualized language or imagery Personal attacks Trolling or insulting/derogatory comments Public or private harassment Publishing other's private information, such as physical or electronic addresses, without explicit permission Other unethical or unprofessional conduct. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team. This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers. This Code of Conduct is adapted from the Contributor Covenant, version 1.2.0, available from http://contributor-covenant.org/version/1/2/0/","title":"Contributor Code of Conduct"},{"location":"faq/","text":"Frequently Asked Questions If you have any questions, please join our Pinax Slack channel . Everyone is welcome! Which starter project should I start with? If you want to build a new site with a combination of project-specific functionality and a few Pinax apps then you probably want to start with either the Zero starter project (if you don't have users logging in to your site) or the Account starter project (if you do have users logging in to your site). I've done the Quick Start and set up a project based on the Account starter project. Now what? You can now start adding your own apps or existing Django apps (whether from Pinax or anywhere else). I already have an existing Django project. Can I still use Pinax? Yes! A large component of Pinax is re-usable Django apps. Most apps make very few assumptions about what else is in your project (although some assume you're using django-user-accounts for user account management). In most cases you can just use an app in the Pinax ecosystem like you would any other Django app. How do we upgrade a site to a newer Pinax release? Individual apps generally follow semantic versioning and often have an upgrade path. So they should be upgradable. If you want to use a starter project, or other collection of Pinax apps, and be able to follow a documented upgrade path, our Proposal for Pinax Distribution Versioning - pinax issue #84 is required. It provides coordinated releases and makes Pinax even more like a Linux distribution, in the way that e.g. Ubuntu creates a coordinated release of an infrastructure along with a variety of applications. What editor/IDE/etc. do Pinax developers like to use? One key to efficient coding is becoming comfortable and proficient with whatever system you use. Our favorites these days include: Visual Studio Code PyCharm Sublime Text There is nothing Pinax-specific about these editor choices and we recommend that you use the text editor or IDE you are most comfortable using and enjoy the most.","title":"FAQs"},{"location":"faq/#frequently-asked-questions","text":"If you have any questions, please join our Pinax Slack channel . Everyone is welcome!","title":"Frequently Asked Questions"},{"location":"faq/#which-starter-project-should-i-start-with","text":"If you want to build a new site with a combination of project-specific functionality and a few Pinax apps then you probably want to start with either the Zero starter project (if you don't have users logging in to your site) or the Account starter project (if you do have users logging in to your site).","title":"Which starter project should I start with?"},{"location":"faq/#ive-done-the-quick-start-and-set-up-a-project-based-on-the-account-starter-project-now-what","text":"You can now start adding your own apps or existing Django apps (whether from Pinax or anywhere else).","title":"I've done the Quick Start and set up a project based on the Account starter project. Now what?"},{"location":"faq/#i-already-have-an-existing-django-project-can-i-still-use-pinax","text":"Yes! A large component of Pinax is re-usable Django apps. Most apps make very few assumptions about what else is in your project (although some assume you're using django-user-accounts for user account management). In most cases you can just use an app in the Pinax ecosystem like you would any other Django app.","title":"I already have an existing Django project. Can I still use Pinax?"},{"location":"faq/#how-do-we-upgrade-a-site-to-a-newer-pinax-release","text":"Individual apps generally follow semantic versioning and often have an upgrade path. So they should be upgradable. If you want to use a starter project, or other collection of Pinax apps, and be able to follow a documented upgrade path, our Proposal for Pinax Distribution Versioning - pinax issue #84 is required. It provides coordinated releases and makes Pinax even more like a Linux distribution, in the way that e.g. Ubuntu creates a coordinated release of an infrastructure along with a variety of applications.","title":"How do we upgrade a site to a newer Pinax release?"},{"location":"faq/#what-editorideetc-do-pinax-developers-like-to-use","text":"One key to efficient coding is becoming comfortable and proficient with whatever system you use. Our favorites these days include: Visual Studio Code PyCharm Sublime Text There is nothing Pinax-specific about these editor choices and we recommend that you use the text editor or IDE you are most comfortable using and enjoy the most.","title":"What editor/IDE/etc. do Pinax developers like to use?"},{"location":"history/","text":"History From Origins To DjangoCon 2008 The idea for Pinax was seeded in 2007 when James Tauber was developing a number of websites (including Quisition and Habitualist ) using Django and realized how much of the code he was writing or intending to write was similar across websites. James became interested in developing a set of reusable Django apps and developing conventions around what such reusable apps should look like. A group called the \"Hotclub of France\" (or django-hotclub ) was formed after PyCon 2007, the name coming from the name of Django Reinhart's band. Not much work (or even discussion) took place the rest of the 2007. There was some discussion and a little bit of sprinting on individual reusable apps at PyCon 2008. In early May 2008, James suggested to the django-hotclub mailing list the need for a project that could be \"an out-of-the-box Django-based website with everything but the domain-specific functionality\". James also suggested it could be a useful scaffolding for writing and trying out reusable apps. He started what he initially called \"Tabula Rasa\", shortly after renamed to \"Pinax\", a suggestion by Orestis Markou. On Memorial Day weekend 2008, James decided to spend the weekend hacking on this new Pinax project and was joined by other \"hotclub\" members Brian Rosner, Jannis Leidel, and Eric Florenzano. By the end of the weekend, with help from others, Pinax had user profile pages, gravatars, user-to-user messages, announcements, OpenID support, join invitations, a basic Twitter clone with OEmbed support, groups and localizations into German, Spanish, and Swedish. By July, Pinax added wikis, threaded discussions, bookmarks with voting, contact import, blogs with tagging and localization into Brazilian Portuguese and Hebrew. TODO: THE BREAK OUT OF CLOUD27 TODO: DJANGOCON 2008 TODO: THE 0.7.X ERA TODO: THE 0.9.X ERA Some Historical Blog Posts Reusable Django Apps And Introducing Tabula Rasa May 6, 2008 Introducing Pinax May 10, 2008 Pinax Progress May 25, 2008 Pinax Progress II May 26, 2008 Pinax Progress III July 2, 2008 Pinax Project and Cloud27 July 30, 2008 DjangoCon, Pinax and Cloud27 September 8, 2008","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#from-origins-to-djangocon-2008","text":"The idea for Pinax was seeded in 2007 when James Tauber was developing a number of websites (including Quisition and Habitualist ) using Django and realized how much of the code he was writing or intending to write was similar across websites. James became interested in developing a set of reusable Django apps and developing conventions around what such reusable apps should look like. A group called the \"Hotclub of France\" (or django-hotclub ) was formed after PyCon 2007, the name coming from the name of Django Reinhart's band. Not much work (or even discussion) took place the rest of the 2007. There was some discussion and a little bit of sprinting on individual reusable apps at PyCon 2008. In early May 2008, James suggested to the django-hotclub mailing list the need for a project that could be \"an out-of-the-box Django-based website with everything but the domain-specific functionality\". James also suggested it could be a useful scaffolding for writing and trying out reusable apps. He started what he initially called \"Tabula Rasa\", shortly after renamed to \"Pinax\", a suggestion by Orestis Markou. On Memorial Day weekend 2008, James decided to spend the weekend hacking on this new Pinax project and was joined by other \"hotclub\" members Brian Rosner, Jannis Leidel, and Eric Florenzano. By the end of the weekend, with help from others, Pinax had user profile pages, gravatars, user-to-user messages, announcements, OpenID support, join invitations, a basic Twitter clone with OEmbed support, groups and localizations into German, Spanish, and Swedish. By July, Pinax added wikis, threaded discussions, bookmarks with voting, contact import, blogs with tagging and localization into Brazilian Portuguese and Hebrew. TODO: THE BREAK OUT OF CLOUD27 TODO: DJANGOCON 2008 TODO: THE 0.7.X ERA TODO: THE 0.9.X ERA","title":"From Origins To DjangoCon 2008"},{"location":"history/#some-historical-blog-posts","text":"Reusable Django Apps And Introducing Tabula Rasa May 6, 2008 Introducing Pinax May 10, 2008 Pinax Progress May 25, 2008 Pinax Progress II May 26, 2008 Pinax Progress III July 2, 2008 Pinax Project and Cloud27 July 30, 2008 DjangoCon, Pinax and Cloud27 September 8, 2008","title":"Some Historical Blog Posts"},{"location":"how_to_contribute/","text":"How to Contribute There are many ways you can help contribute to Pinax and the various apps, themes, and starter projects that it is made up of. Contributing code, writing documentation, reporting bugs, as well as reading and providing feedback on issues and pull requests, all are valid and necessary ways to help. Watch the Videos Each month we do a Pinax Hangout, where we talk about a Pinax app or starter project, and demo how it works. Watching the videos of our previous Pinax Hangouts might be helpful to you and might make contributing to Pinax easier. Click on the Youtube description of each video and you will find an agenda of what was discussed during a particular Hangout. Questions/Help When you have questions or need help it\u2019s best to join our Pinax project Slack channel and ping us there. It is also valid to create an issue and add the question label to it but it will usually take us longer to answer a question that has been filed as an issue than to help you in Slack. If you provide us with an example of a bug you ran into, something that isn\u2019t working, something you don\u2019t understand, we will be able to help you much faster. It is totally sufficient to take a screenshot and post it in Slack or add it to your GitHub issue. Reporting Bugs/ Requesting Features/ Making Pull Requests If you\u2019re not sure how to create an issue or make a pull request on GitHub, please read this blog post for help. If things are still unclear or you run into any problems, please don\u2019t hesitate to ping us in Slack. When you create an issue, please make sure to assign the correct labels to it. See this blog post for help. Committing Code We love thoughtful contributions from the Pinax community. Developers like you improve Pinax apps all the time by filing issues for bugs and feature requests, and even better by submitting pull requests. One great thing about using a distributed versioning control system like git is that anyone can become a contributor. You can clone a repository and work on a new feature without fear of breaking the official release. We recommend that you work on bug fixes or features in a new branch from \"master\". First get the repository and create your own branch. If you are working on pinax-ratings you'd type something like this: mkdir pinax-ratings git clone https://github.com/pinax/pinax-ratings.git pinax-ratings cd pinax-ratings git checkout master git checkout -b my-new-branch When your branch is ready for review, push it to GitHub and open a pull request from your branch to master. Here is a sample workflow of working on issue #27 with a cloned repository: git checkout master git checkout -b 27-frobnozz # write code git commit -a -m \"Change the frobnozz\" # write code git commit -a -m \"Add tests\" git push origin 27-frobnozz You are encouraged to add your name to the AUTHORS.md file in your pull requests and receive credit for helping out. Now go to Github to create a pull request for the fix/feature! Once your pull request is created, Pinax maintainers are notified and review your contributions. Writing Commit Messages Writing a good commit message makes it simple for us to identify what your commit does from a high-level. There are some basic guidelines we'd like to ask you to follow. A critical part is that you keep the first line as short and sweet as possible. This line is important because when git shows commits and it has limited space or a different formatting option is used the first line becomes all someone might see. If your change isn't something non-trivial or there reasoning behind the change is not obvious, then please write up an extended message explaining the fix, your rationale, and anything else relevant for someone reviewing the change. Lastly, if there is a corresponding Github issue use the final line to provide a message that will link the commit message to the issue and auto-close it if appropriate. For instance, use #27 to link to issue number 27: Restore ability to travel back in time You need to be driving 88 miles per hour to generate 1.21 gigawatts of power to properly use this feature. Fixes #27 Coding style When writing code for Pinax apps, please keep our style in mind: Follow PEP8 . There are some cases where we do not follow PEP8, but PEP8 is an excellent starting point. Follow Django's coding style we're pretty much in agreement on Django style outlined there. We enforce a few more strict guides not outlined by PEP8 or Django's coding style: PEP8 tries to keep line length at 80 characters. We follow it when we can, but not when it makes a line harder to read. It is okay to go a little bit over 80 characters if not breaking the line improves readability. Use double quotes (\"double quotes\") not single quotes ('single quotes'). Single quotes are allowed in cases where a double quote is needed in the string. For example title = 'Dwayne \"The Rock\" Johnson' . We feel code reads cleaner in these situations. Docstrings always use three double quotes on a line of their own, so, for example, a single line docstring should take up three lines not one. Imports are grouped specifically and ordered alphabetically. This is shown in the example below. Always use reverse and never @models.permalink . Tuples should be reserved for positional data structures and not used where a list is more appropriate. URL patterns must use the path() and/or url() functions. When callable arguments require multiple lines, place each argument on a new line, indented four spaces from start of the function/method name. Here is an example of these rules applied: # models.py # first set of imports are stdlib imports # non-from imports go first then from style import in their own group import csv # second set of imports are Django from django.conf import settings from django.db import models from django.utils import timezone from django.utils.translation import ugettext_lazy as _ from django.urls import reverse # third set of imports are external apps (if applicable) from pinax. import TagField # fourth set of imports are local apps from .fields import MarkupField from .utils import frobnozz class Task(models.Model): \"\"\" A model for storing a task. \"\"\" title = models.CharField(max_length=50) description = models.TextField() creator = models.ForeignKey(settings.AUTH_USER_MODEL) created = models.DateTimeField(default=timezone.now) modified = models.DateTimeField(default=timezone.now) objects = models.Manager() class Meta: verbose_name = _(\"task\") verbose_name_plural = _(\"tasks\") def __str__(self): return self.title def get_absolute_url(self): return reverse(\"my_app:task_detail\", args=[self.pk]) def frobnozz_with_deconstrictulator( self, first_argument, second_argument, third_argument, fourth_argument): \"\"\" Simulate frobnozzes after deconstriculation \"\"\" # do some magic This example shows use of path() and an acceptable line longer than 80 characters. # urls.py from django.urls import include, path urlpatterns = [ path(\"account/\", include(\"account.urls\")), path(\"tasks/<int:pk>/\", TaskDetail.as_view(), name=\"task_view\") path(\"tasks/<int:pk>/frobnozz/<int:pk>/wilco\", TaskFrobnozz.as_view(), name=\"task_frobnozz\") # more urls ] Testing Pinax apps typically support several different versions of Python and several different versions of Django. The supported combinations are specified in tox.ini at the root of every Pinax app. Here is a sample tox.ini file from the Pinax 18.01 distribution: [flake8] ignore = E265,E501 max-line-length = 100 max-complexity = 10 exclude = **/*/migrations/* inline-quotes = double [isort] multi_line_output=3 known_django=django known_third_party=appconf,pinax sections=FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER skip_glob=**/*/migrations/* [coverage:run] source = pinax omit = **/*/conf.py,**/*/tests/*,**/*/migrations/* branch = true data_file = .coverage [coverage:report] omit = **/*/conf.py,**/*/tests/*,**/*/migrations/* exclude_lines = coverage: omit show_missing = True [tox] envlist = checkqa, py27-dj{111} py34-dj{111,20} py35-dj{111,20} py36-dj{111,20} [testenv] passenv = CI CIRCLECI CIRCLE_* deps = coverage codecov dj111: Django>=1.11,<1.12 dj20: Django<2.1 master: https://github.com/django/django/tarball/master usedevelop = True commands = coverage run setup.py test coverage report -m --skip-covered [testenv:checkqa] commands = flake8 pinax isort --recursive --check-only --diff pinax -sp tox.ini deps = flake8 == 3.4.1 flake8-quotes == 0.11.0 isort == 4.2.15 The supported Python - Django combinations are specified in the [tox] envlist= section. In order to test all supported Python/Django combinations we use pyenv and detox ( tox ). Installing pyenv and detox First install pyenv according to the directions at https://github.com/yyuu/pyenv. (Note you may need to install to a different shell profile configuration file, as outlined in the installation directions.) $ brew install pyenv $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile $ echo 'if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi' >> ~/.bash_profile $ exec $SHELL Next install detox : $ pip install detox Installing Python versions Using the Pinax app tox.ini file, determine what versions of Python are required for testing. In our example above we support Python 2.7.x, 3.3.x, 3.4.x, and 3.5.x. Install the latest version of each required Python . release using pyenv : $ pyenv install 2.7.14 $ pyenv install 3.4.7 $ pyenv install 3.5.4 $ pyenv install 3.6.4 Ensure these versions appear in the list of installed Python versions: $ pyenv versions 3.6.4 3.5.4 3.4.7 2.7.14 Now activate the versions required for your testing: $ pyenv local 3.6.4 3.5.4 3.4.7 2.7.14 and verify those versions are active (indicated by an asterisk next to the version number): $ pyenv versions * 3.6.4 * 3.5.4 * 3.4.7 * 2.7.14 Running tests Finally, invoke detox in the same directory as tox.ini . $ detox If your installation and setup worked, you should see something like this: checkqa create: /Users/pinax/code/pinax-ratings/.tox/checkqa py27-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py27-dj111 py34-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py34-dj111 py34-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py34-dj20 py35-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py35-dj111 py35-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py35-dj20 py36-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py36-dj111 py36-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py36-dj20 ... Each test combination produces it's own output, so review errors carefully to understand whether the problem lies with a general coding mistake or compatibility with a specific version of Python and/or Django. We encourage developers to test updated code before submitting a pull request. Every pull request triggers our Travis continuous integration (CI) system, which automatically tests the same Python/Django configurations using tox.ini . A pull request which passes all tests in all configurations is a sign of quality and attention to detail. Pull Requests If you would like to add functionality or add a new feature, please submit an issue first to make sure it\u2019s a direction we want to take. Please keep your pull requests focused on one specific thing only. If you have a number of contributions to make, then please send separate pull requests. It is much easier on maintainers to receive small, well defined, pull requests, than it is to have a single large one that batches up a lot of unrelated commits. If you ended up making multiple commits for one logical change, please rebase into a single commit. git rebase -i HEAD~10 # where 10 is the number of commits back you need This will pop up an editor with your commits and some instructions you want to squash commits down by replacing 'pick' with 's' to have it combined with the commit before it. You can squash multiple ones at the same time. When you save and exit the text editor where you were squashing commits, git will squash them down and then present you with another editor with commit messages. Choose the one to apply to the squashed commit (or write a new one entirely.) Save and exit will complete the rebase. Use a forced push to your fork. git push -f When you create a pull requests, which fixes an issue, please link the original issue in your pull request.","title":"How to Contribute"},{"location":"how_to_contribute/#how-to-contribute","text":"There are many ways you can help contribute to Pinax and the various apps, themes, and starter projects that it is made up of. Contributing code, writing documentation, reporting bugs, as well as reading and providing feedback on issues and pull requests, all are valid and necessary ways to help.","title":"How to Contribute"},{"location":"how_to_contribute/#watch-the-videos","text":"Each month we do a Pinax Hangout, where we talk about a Pinax app or starter project, and demo how it works. Watching the videos of our previous Pinax Hangouts might be helpful to you and might make contributing to Pinax easier. Click on the Youtube description of each video and you will find an agenda of what was discussed during a particular Hangout.","title":"Watch the Videos"},{"location":"how_to_contribute/#questionshelp","text":"When you have questions or need help it\u2019s best to join our Pinax project Slack channel and ping us there. It is also valid to create an issue and add the question label to it but it will usually take us longer to answer a question that has been filed as an issue than to help you in Slack. If you provide us with an example of a bug you ran into, something that isn\u2019t working, something you don\u2019t understand, we will be able to help you much faster. It is totally sufficient to take a screenshot and post it in Slack or add it to your GitHub issue.","title":"Questions/Help"},{"location":"how_to_contribute/#reporting-bugs-requesting-features-making-pull-requests","text":"If you\u2019re not sure how to create an issue or make a pull request on GitHub, please read this blog post for help. If things are still unclear or you run into any problems, please don\u2019t hesitate to ping us in Slack. When you create an issue, please make sure to assign the correct labels to it. See this blog post for help.","title":"Reporting Bugs/ Requesting Features/ Making Pull Requests"},{"location":"how_to_contribute/#committing-code","text":"We love thoughtful contributions from the Pinax community. Developers like you improve Pinax apps all the time by filing issues for bugs and feature requests, and even better by submitting pull requests. One great thing about using a distributed versioning control system like git is that anyone can become a contributor. You can clone a repository and work on a new feature without fear of breaking the official release. We recommend that you work on bug fixes or features in a new branch from \"master\". First get the repository and create your own branch. If you are working on pinax-ratings you'd type something like this: mkdir pinax-ratings git clone https://github.com/pinax/pinax-ratings.git pinax-ratings cd pinax-ratings git checkout master git checkout -b my-new-branch When your branch is ready for review, push it to GitHub and open a pull request from your branch to master. Here is a sample workflow of working on issue #27 with a cloned repository: git checkout master git checkout -b 27-frobnozz # write code git commit -a -m \"Change the frobnozz\" # write code git commit -a -m \"Add tests\" git push origin 27-frobnozz You are encouraged to add your name to the AUTHORS.md file in your pull requests and receive credit for helping out. Now go to Github to create a pull request for the fix/feature! Once your pull request is created, Pinax maintainers are notified and review your contributions.","title":"Committing Code"},{"location":"how_to_contribute/#writing-commit-messages","text":"Writing a good commit message makes it simple for us to identify what your commit does from a high-level. There are some basic guidelines we'd like to ask you to follow. A critical part is that you keep the first line as short and sweet as possible. This line is important because when git shows commits and it has limited space or a different formatting option is used the first line becomes all someone might see. If your change isn't something non-trivial or there reasoning behind the change is not obvious, then please write up an extended message explaining the fix, your rationale, and anything else relevant for someone reviewing the change. Lastly, if there is a corresponding Github issue use the final line to provide a message that will link the commit message to the issue and auto-close it if appropriate. For instance, use #27 to link to issue number 27: Restore ability to travel back in time You need to be driving 88 miles per hour to generate 1.21 gigawatts of power to properly use this feature. Fixes #27","title":"Writing Commit Messages"},{"location":"how_to_contribute/#coding-style","text":"When writing code for Pinax apps, please keep our style in mind: Follow PEP8 . There are some cases where we do not follow PEP8, but PEP8 is an excellent starting point. Follow Django's coding style we're pretty much in agreement on Django style outlined there. We enforce a few more strict guides not outlined by PEP8 or Django's coding style: PEP8 tries to keep line length at 80 characters. We follow it when we can, but not when it makes a line harder to read. It is okay to go a little bit over 80 characters if not breaking the line improves readability. Use double quotes (\"double quotes\") not single quotes ('single quotes'). Single quotes are allowed in cases where a double quote is needed in the string. For example title = 'Dwayne \"The Rock\" Johnson' . We feel code reads cleaner in these situations. Docstrings always use three double quotes on a line of their own, so, for example, a single line docstring should take up three lines not one. Imports are grouped specifically and ordered alphabetically. This is shown in the example below. Always use reverse and never @models.permalink . Tuples should be reserved for positional data structures and not used where a list is more appropriate. URL patterns must use the path() and/or url() functions. When callable arguments require multiple lines, place each argument on a new line, indented four spaces from start of the function/method name. Here is an example of these rules applied: # models.py # first set of imports are stdlib imports # non-from imports go first then from style import in their own group import csv # second set of imports are Django from django.conf import settings from django.db import models from django.utils import timezone from django.utils.translation import ugettext_lazy as _ from django.urls import reverse # third set of imports are external apps (if applicable) from pinax. import TagField # fourth set of imports are local apps from .fields import MarkupField from .utils import frobnozz class Task(models.Model): \"\"\" A model for storing a task. \"\"\" title = models.CharField(max_length=50) description = models.TextField() creator = models.ForeignKey(settings.AUTH_USER_MODEL) created = models.DateTimeField(default=timezone.now) modified = models.DateTimeField(default=timezone.now) objects = models.Manager() class Meta: verbose_name = _(\"task\") verbose_name_plural = _(\"tasks\") def __str__(self): return self.title def get_absolute_url(self): return reverse(\"my_app:task_detail\", args=[self.pk]) def frobnozz_with_deconstrictulator( self, first_argument, second_argument, third_argument, fourth_argument): \"\"\" Simulate frobnozzes after deconstriculation \"\"\" # do some magic This example shows use of path() and an acceptable line longer than 80 characters. # urls.py from django.urls import include, path urlpatterns = [ path(\"account/\", include(\"account.urls\")), path(\"tasks/<int:pk>/\", TaskDetail.as_view(), name=\"task_view\") path(\"tasks/<int:pk>/frobnozz/<int:pk>/wilco\", TaskFrobnozz.as_view(), name=\"task_frobnozz\") # more urls ]","title":"Coding style"},{"location":"how_to_contribute/#testing","text":"Pinax apps typically support several different versions of Python and several different versions of Django. The supported combinations are specified in tox.ini at the root of every Pinax app. Here is a sample tox.ini file from the Pinax 18.01 distribution: [flake8] ignore = E265,E501 max-line-length = 100 max-complexity = 10 exclude = **/*/migrations/* inline-quotes = double [isort] multi_line_output=3 known_django=django known_third_party=appconf,pinax sections=FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER skip_glob=**/*/migrations/* [coverage:run] source = pinax omit = **/*/conf.py,**/*/tests/*,**/*/migrations/* branch = true data_file = .coverage [coverage:report] omit = **/*/conf.py,**/*/tests/*,**/*/migrations/* exclude_lines = coverage: omit show_missing = True [tox] envlist = checkqa, py27-dj{111} py34-dj{111,20} py35-dj{111,20} py36-dj{111,20} [testenv] passenv = CI CIRCLECI CIRCLE_* deps = coverage codecov dj111: Django>=1.11,<1.12 dj20: Django<2.1 master: https://github.com/django/django/tarball/master usedevelop = True commands = coverage run setup.py test coverage report -m --skip-covered [testenv:checkqa] commands = flake8 pinax isort --recursive --check-only --diff pinax -sp tox.ini deps = flake8 == 3.4.1 flake8-quotes == 0.11.0 isort == 4.2.15 The supported Python - Django combinations are specified in the [tox] envlist= section. In order to test all supported Python/Django combinations we use pyenv and detox ( tox ).","title":"Testing"},{"location":"how_to_contribute/#installing-pyenv-and-detox","text":"First install pyenv according to the directions at https://github.com/yyuu/pyenv. (Note you may need to install to a different shell profile configuration file, as outlined in the installation directions.) $ brew install pyenv $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile $ echo 'if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi' >> ~/.bash_profile $ exec $SHELL Next install detox : $ pip install detox","title":"Installing pyenv and detox"},{"location":"how_to_contribute/#installing-python-versions","text":"Using the Pinax app tox.ini file, determine what versions of Python are required for testing. In our example above we support Python 2.7.x, 3.3.x, 3.4.x, and 3.5.x. Install the latest version of each required Python . release using pyenv : $ pyenv install 2.7.14 $ pyenv install 3.4.7 $ pyenv install 3.5.4 $ pyenv install 3.6.4 Ensure these versions appear in the list of installed Python versions: $ pyenv versions 3.6.4 3.5.4 3.4.7 2.7.14 Now activate the versions required for your testing: $ pyenv local 3.6.4 3.5.4 3.4.7 2.7.14 and verify those versions are active (indicated by an asterisk next to the version number): $ pyenv versions * 3.6.4 * 3.5.4 * 3.4.7 * 2.7.14","title":"Installing Python versions"},{"location":"how_to_contribute/#running-tests","text":"Finally, invoke detox in the same directory as tox.ini . $ detox If your installation and setup worked, you should see something like this: checkqa create: /Users/pinax/code/pinax-ratings/.tox/checkqa py27-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py27-dj111 py34-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py34-dj111 py34-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py34-dj20 py35-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py35-dj111 py35-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py35-dj20 py36-dj111 create: /Users/pinax/code/pinax-ratings/.tox/py36-dj111 py36-dj20 create: /Users/pinax/code/pinax-ratings/.tox/py36-dj20 ... Each test combination produces it's own output, so review errors carefully to understand whether the problem lies with a general coding mistake or compatibility with a specific version of Python and/or Django. We encourage developers to test updated code before submitting a pull request. Every pull request triggers our Travis continuous integration (CI) system, which automatically tests the same Python/Django configurations using tox.ini . A pull request which passes all tests in all configurations is a sign of quality and attention to detail.","title":"Running tests"},{"location":"how_to_contribute/#pull-requests","text":"If you would like to add functionality or add a new feature, please submit an issue first to make sure it\u2019s a direction we want to take. Please keep your pull requests focused on one specific thing only. If you have a number of contributions to make, then please send separate pull requests. It is much easier on maintainers to receive small, well defined, pull requests, than it is to have a single large one that batches up a lot of unrelated commits. If you ended up making multiple commits for one logical change, please rebase into a single commit. git rebase -i HEAD~10 # where 10 is the number of commits back you need This will pop up an editor with your commits and some instructions you want to squash commits down by replacing 'pick' with 's' to have it combined with the commit before it. You can squash multiple ones at the same time. When you save and exit the text editor where you were squashing commits, git will squash them down and then present you with another editor with commit messages. Choose the one to apply to the squashed commit (or write a new one entirely.) Save and exit will complete the rebase. Use a forced push to your fork. git push -f When you create a pull requests, which fixes an issue, please link the original issue in your pull request.","title":"Pull Requests"},{"location":"in_the_wild/","text":"Pinax in the Wild Pinax is used to build all sorts of things. This is just a small sampling of some of the things that can be built with Pinax. If you have built something please either create an issue and tell us about it or fork this repo , update this document, and send a pull request. Pinax Blog http://blog.pinaxproject.com/ Blog starter project pinax-blog for the blog application pinax-pages to add some basic CMS functionality Django CMS Light http://django-cms-light.com KISS multi-site CMS project optimized for hackers based on git and markdown like django and pelican had a baby with the purpose of hacking on local economy growth for the greater good. Based on social auth starter project (https://github.com/pinax/pinax-starter-projects/tree/social-auth) Uses Pinax Theme Bootstrap Uses Pinax Web Analytics Uses Pinax Eventlog","title":"In the Wild"},{"location":"in_the_wild/#pinax-in-the-wild","text":"Pinax is used to build all sorts of things. This is just a small sampling of some of the things that can be built with Pinax. If you have built something please either create an issue and tell us about it or fork this repo , update this document, and send a pull request.","title":"Pinax in the Wild"},{"location":"in_the_wild/#pinax-blog","text":"http://blog.pinaxproject.com/ Blog starter project pinax-blog for the blog application pinax-pages to add some basic CMS functionality","title":"Pinax Blog"},{"location":"in_the_wild/#django-cms-light","text":"http://django-cms-light.com KISS multi-site CMS project optimized for hackers based on git and markdown like django and pelican had a baby with the purpose of hacking on local economy growth for the greater good. Based on social auth starter project (https://github.com/pinax/pinax-starter-projects/tree/social-auth) Uses Pinax Theme Bootstrap Uses Pinax Web Analytics Uses Pinax Eventlog","title":"Django CMS Light"},{"location":"pinax_apps/","text":"Pinax Apps Every Pinax app has documentation in it's README.md file. We recommend you follow instructions found there for installing and adding a Pinax app to your project. Current Distribution (18.01) Pinax Apps django-user-accounts django-user-accounts provides a Django project with a very extensible infrastructure for dealing with user accounts. pinax-announcements pinax-announcements is a site-wide announcement reusable app for Django. pinax-blog pinax-blog is a blog app for Django. pinax-calendars pinax-calendars provides utilities for publishing events as a calendar. pinax-eventlog pinax-eventlog is a simple app that provides an easy and clean interface for logging diagnostic as well as business intelligence data about activity that occurs in your site. pinax-events pinax-events is a simple app for publishing events on your site. pinax-images pinax-images is an app for managing collections of images associated with any content object. pinax-invitations pinax-invitations is a site invitation app for Django. pinax-likes pinax-likes is a liking app for Django. pinax-messages pinax-messages is an app for providing private user-to-user threaded messaging. pinax-news pinax-news is a simple app for publishing links to news articles on your site. pinax-notifications pinax-notifications is a user notification management app for the Django web framework. pinax-patches pinax-stripe pinax-stripe is a payments Django app for Stripe. It allows you to process one off charges as well as signup users for recurring subscriptions managed by Stripe. pinax-testimonials pinax-testimonials provides support for any site wanting to display testimonials. pinax-waitinglist django-waitinglist is a Django waiting list app for running a private beta with cohorts support. pinax-webanalytics pinax-webanalytics provides analytics and metrics integration for Django. Updated Pinax Apps These apps are not part of the latest official distribution, but have been updated to support the latest Django/Python compatibility matrix, including Django 2.0. Their omission may be because the app is not demonstrated with a starter or demo project, insufficient documentation, or lack of thorough tests. However, just because an app is not included in the Pinax distribution does not mean it is bad or useless. Many of these additional apps are useful as-is, and are sourced for various real-world projects. If you'd like to help improve the Pinax distribution list, we appreciate Pinax app pull requests to improve documentation, fix issues, and add tests. pinax-badges pinax-badges allows awarding badges to users in Django. pinax-cohorts pinax-cohorts allows creating cohorts for inviting people off your pinax-waitinglist waiting list to your private beta site. pinax-comments pinax-comments is a comments app for Django. pinax-documents pinax-documents is a document management app for collecting and sharing documents in folders. pinax-forums pinax-forums is an extensible forums app for Django and Pinax. pinax-points pinax-points is a points, positions, and levels app for Django. pinax-ratings pinax-ratings is a ratings app for Django. pinax-referrals pinax-referrals provides a Django site with referrals functionality. pinax-submissions pinax-submissions is an app for proposing and reviewing submissions. pinax-teams pinax-teams is an app for Django sites that supports open, by invitation, and by application teams. pinax-wiki pinax-wiki lets you easily add a wiki to your Django site. Other Pinax Apps django-bookmarks django-bookmarks provides bookmark management for the Django web framework. django-mailer django-mailer is a reusable Django app for queuing the sending of email. django-flag django-flag provides flagging of inappropriate spam/content. django-friends django-friends provides friendship, contact, and invitation management for the Django web framework. pinax-lms-activities pinax-lms-activities provides a framework and base learning activities for Pinax LMS. pinax-phone-confirmation pinax-phone-confirmation is an app to provide phone confirmation via Twilio. pinax-types symposion symposion is a conference management solution from Eldarion. It was built with the generous support of the Python Software Foundation. See http://eldarion.com/symposion/ for commercial support, customization and hosting. Support and Demonstration Apps cloudspotting2 Demonstration project showing the use of many Pinax apps. Clone and run this project locally to see the Pinax apps in action. pinax-calendars-demo Clone and run this project to see pinax-calendars app in action. pinax-design Source for Pinax app patches, demonstrated at http://pinaxproject.com/pinax-design/. pinax-starter-app pinax-starter-app contains starter app templates used to create base projects from which you build your site. pinax-templates Provides default template for many Pinax apps. pinax_theme_tester pinax_theme_tester provides the magic driving the template demonstration site http://templates.pinaxproject.com.","title":"Pinax Apps"},{"location":"pinax_apps/#pinax-apps","text":"Every Pinax app has documentation in it's README.md file. We recommend you follow instructions found there for installing and adding a Pinax app to your project.","title":"Pinax Apps"},{"location":"pinax_apps/#current-distribution-1801-pinax-apps","text":"","title":"Current Distribution (18.01) Pinax Apps"},{"location":"pinax_apps/#django-user-accounts","text":"django-user-accounts provides a Django project with a very extensible infrastructure for dealing with user accounts.","title":"django-user-accounts"},{"location":"pinax_apps/#pinax-announcements","text":"pinax-announcements is a site-wide announcement reusable app for Django.","title":"pinax-announcements"},{"location":"pinax_apps/#pinax-blog","text":"pinax-blog is a blog app for Django.","title":"pinax-blog"},{"location":"pinax_apps/#pinax-calendars","text":"pinax-calendars provides utilities for publishing events as a calendar.","title":"pinax-calendars"},{"location":"pinax_apps/#pinax-eventlog","text":"pinax-eventlog is a simple app that provides an easy and clean interface for logging diagnostic as well as business intelligence data about activity that occurs in your site.","title":"pinax-eventlog"},{"location":"pinax_apps/#pinax-events","text":"pinax-events is a simple app for publishing events on your site.","title":"pinax-events"},{"location":"pinax_apps/#pinax-images","text":"pinax-images is an app for managing collections of images associated with any content object.","title":"pinax-images"},{"location":"pinax_apps/#pinax-invitations","text":"pinax-invitations is a site invitation app for Django.","title":"pinax-invitations"},{"location":"pinax_apps/#pinax-likes","text":"pinax-likes is a liking app for Django.","title":"pinax-likes"},{"location":"pinax_apps/#pinax-messages","text":"pinax-messages is an app for providing private user-to-user threaded messaging.","title":"pinax-messages"},{"location":"pinax_apps/#pinax-news","text":"pinax-news is a simple app for publishing links to news articles on your site.","title":"pinax-news"},{"location":"pinax_apps/#pinax-notifications","text":"pinax-notifications is a user notification management app for the Django web framework.","title":"pinax-notifications"},{"location":"pinax_apps/#pinax-patches","text":"","title":"pinax-patches"},{"location":"pinax_apps/#pinax-stripe","text":"pinax-stripe is a payments Django app for Stripe. It allows you to process one off charges as well as signup users for recurring subscriptions managed by Stripe.","title":"pinax-stripe"},{"location":"pinax_apps/#pinax-testimonials","text":"pinax-testimonials provides support for any site wanting to display testimonials.","title":"pinax-testimonials"},{"location":"pinax_apps/#pinax-waitinglist","text":"django-waitinglist is a Django waiting list app for running a private beta with cohorts support.","title":"pinax-waitinglist"},{"location":"pinax_apps/#pinax-webanalytics","text":"pinax-webanalytics provides analytics and metrics integration for Django.","title":"pinax-webanalytics"},{"location":"pinax_apps/#updated-pinax-apps","text":"These apps are not part of the latest official distribution, but have been updated to support the latest Django/Python compatibility matrix, including Django 2.0. Their omission may be because the app is not demonstrated with a starter or demo project, insufficient documentation, or lack of thorough tests. However, just because an app is not included in the Pinax distribution does not mean it is bad or useless. Many of these additional apps are useful as-is, and are sourced for various real-world projects. If you'd like to help improve the Pinax distribution list, we appreciate Pinax app pull requests to improve documentation, fix issues, and add tests.","title":"Updated Pinax Apps"},{"location":"pinax_apps/#pinax-badges","text":"pinax-badges allows awarding badges to users in Django.","title":"pinax-badges"},{"location":"pinax_apps/#pinax-cohorts","text":"pinax-cohorts allows creating cohorts for inviting people off your pinax-waitinglist waiting list to your private beta site.","title":"pinax-cohorts"},{"location":"pinax_apps/#pinax-comments","text":"pinax-comments is a comments app for Django.","title":"pinax-comments"},{"location":"pinax_apps/#pinax-documents","text":"pinax-documents is a document management app for collecting and sharing documents in folders.","title":"pinax-documents"},{"location":"pinax_apps/#pinax-forums","text":"pinax-forums is an extensible forums app for Django and Pinax.","title":"pinax-forums"},{"location":"pinax_apps/#pinax-points","text":"pinax-points is a points, positions, and levels app for Django.","title":"pinax-points"},{"location":"pinax_apps/#pinax-ratings","text":"pinax-ratings is a ratings app for Django.","title":"pinax-ratings"},{"location":"pinax_apps/#pinax-referrals","text":"pinax-referrals provides a Django site with referrals functionality.","title":"pinax-referrals"},{"location":"pinax_apps/#pinax-submissions","text":"pinax-submissions is an app for proposing and reviewing submissions.","title":"pinax-submissions"},{"location":"pinax_apps/#pinax-teams","text":"pinax-teams is an app for Django sites that supports open, by invitation, and by application teams.","title":"pinax-teams"},{"location":"pinax_apps/#pinax-wiki","text":"pinax-wiki lets you easily add a wiki to your Django site.","title":"pinax-wiki"},{"location":"pinax_apps/#other-pinax-apps","text":"","title":"Other Pinax Apps"},{"location":"pinax_apps/#django-bookmarks","text":"django-bookmarks provides bookmark management for the Django web framework.","title":"django-bookmarks"},{"location":"pinax_apps/#django-mailer","text":"django-mailer is a reusable Django app for queuing the sending of email.","title":"django-mailer"},{"location":"pinax_apps/#django-flag","text":"django-flag provides flagging of inappropriate spam/content.","title":"django-flag"},{"location":"pinax_apps/#django-friends","text":"django-friends provides friendship, contact, and invitation management for the Django web framework.","title":"django-friends"},{"location":"pinax_apps/#pinax-lms-activities","text":"pinax-lms-activities provides a framework and base learning activities for Pinax LMS.","title":"pinax-lms-activities"},{"location":"pinax_apps/#pinax-phone-confirmation","text":"pinax-phone-confirmation is an app to provide phone confirmation via Twilio.","title":"pinax-phone-confirmation"},{"location":"pinax_apps/#pinax-types","text":"","title":"pinax-types"},{"location":"pinax_apps/#symposion","text":"symposion is a conference management solution from Eldarion. It was built with the generous support of the Python Software Foundation. See http://eldarion.com/symposion/ for commercial support, customization and hosting.","title":"symposion"},{"location":"pinax_apps/#support-and-demonstration-apps","text":"","title":"Support and Demonstration Apps"},{"location":"pinax_apps/#cloudspotting2","text":"Demonstration project showing the use of many Pinax apps. Clone and run this project locally to see the Pinax apps in action.","title":"cloudspotting2"},{"location":"pinax_apps/#pinax-calendars-demo","text":"Clone and run this project to see pinax-calendars app in action.","title":"pinax-calendars-demo"},{"location":"pinax_apps/#pinax-design","text":"Source for Pinax app patches, demonstrated at http://pinaxproject.com/pinax-design/.","title":"pinax-design"},{"location":"pinax_apps/#pinax-starter-app","text":"pinax-starter-app contains starter app templates used to create base projects from which you build your site.","title":"pinax-starter-app"},{"location":"pinax_apps/#pinax-templates","text":"Provides default template for many Pinax apps.","title":"pinax-templates"},{"location":"pinax_apps/#pinax_theme_tester","text":"pinax_theme_tester provides the magic driving the template demonstration site http://templates.pinaxproject.com.","title":"pinax_theme_tester"},{"location":"pinax_starter_projects/","text":"Pinax Starter Projects The pinax/pinax-starter-projects repo is available here . Many starter projects are derivatives of other projects ( zero is the parent of account among many others). We leverage git and branching to manage the hierarchy. Each project template lives in it's own branch and branches from its natural parent. All starter projects share a common method for getting started. It involves creating a virtual environment, installing Django, and running the startproject command with a URL to the template, followed by a few commands within your new project. Or even easier, you can use the pinax command line utility. Getting Started Refer to the Pinax Starter Project Quick Start guide for simple steps to get started. Using the pinax command line utility Since you've already installed pinax-cli as described in the Quick Start guide, you can experiment with the pinax command: pinax projects # list available project releases pinax start <kind> <project_name> If you are feeling adventurous you can install from the latest development branch by passing the --dev flag: pinax start --dev <kind> <project_name> For the Pinax documents , wiki , team-wiki , and social-auth starter projects, using the --dev option is the only way to create a project because these do not yet have official releases. This is indicated by a lack of version number next to the project: $ pinax projects Release Project ------- --------------- 4.0.2 account 4.0.2 blog 2.0.2 company documents social-auth 4.0.2 static 4.0.2 stripe team-wiki 3.0.2 waitinglist wiki 4.0.2 zero Starter Project Inheritance zero account documents social-auth wiki team-wiki blog static waiting-list social lms forums private-beta symposion Starter Project List Pinax-Project-Zero This project lays the foundation for all other Pinax starter projects. It provides the project directory layout and Bootstrap-based theme. pinax start zero mysite Pinax-Project-Account In addition to what is provided by the \"zero\" project, this project provides thorough integration with django-user-accounts, adding comprehensive account management functionality. It is a foundation suitable for most sites that have user accounts. pinax start account mysite Pinax-Project-SocialAuth In addition to what is provided by the \"account\" project, this project integrates with python-social-auth for Twitter, Facebook, and Google authentication. pinax start --dev social-auth mysite Pinax-Project-Blog This project gets you off and running with a blog. pinax start blog mysite Pinax-Project-Static The purpose of this starter project is to provide a robust mocking and design tool. pinax start static mysite Pinax-Project-Documents Builds on the Accounts starter project to get you off and running with a document library built around pinax-documents . pinax start documents mysite Pinax-Project-Wiki This project is a demo starter project that provides a wiki for authenticated users. pinax start wiki mysite Pinax-Project-Team-Wiki This project is a starter project that has account management with profiles and teams and basic collaborative content. pinax start team-wiki mysite Additional starter projects: pinax-project-social pinax-project-waitinglist pinax-project-symposion pinax-project-lms pinax-project-forums pinax-project-teams Starter Project Development If you want to develop your own starter projects here is the workflow you should follow: Start with the branch you want to base your new project on. git co -b <name> Do the work on your project template Test your project template by running django-admin.py startproject --template=pinax-starter-projects test1 -n webpack.config.js -n PROJECT_README.md Once you are satisified with your testing, commit. git co master and then update this README.md file with details about your new project Update all descendent branches: ./update.sh git push","title":"Pinax Starter Projects"},{"location":"pinax_starter_projects/#pinax-starter-projects","text":"The pinax/pinax-starter-projects repo is available here . Many starter projects are derivatives of other projects ( zero is the parent of account among many others). We leverage git and branching to manage the hierarchy. Each project template lives in it's own branch and branches from its natural parent. All starter projects share a common method for getting started. It involves creating a virtual environment, installing Django, and running the startproject command with a URL to the template, followed by a few commands within your new project. Or even easier, you can use the pinax command line utility.","title":"Pinax Starter Projects"},{"location":"pinax_starter_projects/#getting-started","text":"Refer to the Pinax Starter Project Quick Start guide for simple steps to get started.","title":"Getting Started"},{"location":"pinax_starter_projects/#using-the-pinax-command-line-utility","text":"Since you've already installed pinax-cli as described in the Quick Start guide, you can experiment with the pinax command: pinax projects # list available project releases pinax start <kind> <project_name> If you are feeling adventurous you can install from the latest development branch by passing the --dev flag: pinax start --dev <kind> <project_name> For the Pinax documents , wiki , team-wiki , and social-auth starter projects, using the --dev option is the only way to create a project because these do not yet have official releases. This is indicated by a lack of version number next to the project: $ pinax projects Release Project ------- --------------- 4.0.2 account 4.0.2 blog 2.0.2 company documents social-auth 4.0.2 static 4.0.2 stripe team-wiki 3.0.2 waitinglist wiki 4.0.2 zero","title":"Using the pinax command line utility"},{"location":"pinax_starter_projects/#starter-project-inheritance","text":"zero account documents social-auth wiki team-wiki blog static waiting-list social lms forums private-beta symposion","title":"Starter Project Inheritance"},{"location":"pinax_starter_projects/#starter-project-list","text":"","title":"Starter Project List"},{"location":"pinax_starter_projects/#pinax-project-zero","text":"This project lays the foundation for all other Pinax starter projects. It provides the project directory layout and Bootstrap-based theme. pinax start zero mysite","title":"Pinax-Project-Zero"},{"location":"pinax_starter_projects/#pinax-project-account","text":"In addition to what is provided by the \"zero\" project, this project provides thorough integration with django-user-accounts, adding comprehensive account management functionality. It is a foundation suitable for most sites that have user accounts. pinax start account mysite","title":"Pinax-Project-Account"},{"location":"pinax_starter_projects/#pinax-project-socialauth","text":"In addition to what is provided by the \"account\" project, this project integrates with python-social-auth for Twitter, Facebook, and Google authentication. pinax start --dev social-auth mysite","title":"Pinax-Project-SocialAuth"},{"location":"pinax_starter_projects/#pinax-project-blog","text":"This project gets you off and running with a blog. pinax start blog mysite","title":"Pinax-Project-Blog"},{"location":"pinax_starter_projects/#pinax-project-static","text":"The purpose of this starter project is to provide a robust mocking and design tool. pinax start static mysite","title":"Pinax-Project-Static"},{"location":"pinax_starter_projects/#pinax-project-documents","text":"Builds on the Accounts starter project to get you off and running with a document library built around pinax-documents . pinax start documents mysite","title":"Pinax-Project-Documents"},{"location":"pinax_starter_projects/#pinax-project-wiki","text":"This project is a demo starter project that provides a wiki for authenticated users. pinax start wiki mysite","title":"Pinax-Project-Wiki"},{"location":"pinax_starter_projects/#pinax-project-team-wiki","text":"This project is a starter project that has account management with profiles and teams and basic collaborative content. pinax start team-wiki mysite","title":"Pinax-Project-Team-Wiki"},{"location":"pinax_starter_projects/#additional-starter-projects","text":"pinax-project-social pinax-project-waitinglist pinax-project-symposion pinax-project-lms pinax-project-forums pinax-project-teams","title":"Additional starter projects:"},{"location":"pinax_starter_projects/#starter-project-development","text":"If you want to develop your own starter projects here is the workflow you should follow: Start with the branch you want to base your new project on. git co -b <name> Do the work on your project template Test your project template by running django-admin.py startproject --template=pinax-starter-projects test1 -n webpack.config.js -n PROJECT_README.md Once you are satisified with your testing, commit. git co master and then update this README.md file with details about your new project Update all descendent branches: ./update.sh git push","title":"Starter Project Development"},{"location":"quick_start/","text":"Quick Start Make sure you've read What is Pinax? to get a conceptual overview of Pinax. We strongly recommend running Pinax (or indeed, any Django) projects in a virtual environment: pip install virtualenv virtualenv mysiteenv source mysiteenv/bin/activate pip install pinax-cli pinax start account mysite If you are using pipenv try this instead: mkdir mysite cd mysite pipenv --three pipenv shell pip install pinax-cli pinax start account mysite --location . NOTE : If you are wondering what pinax start actually does, it is equivalent to: pip install Django==2.0 django-admin startproject --template=https://github.com/pinax/pinax-starter-projects/zipball/account mysite Modern Local Development Steps If you are using pinax-templates, you will use an npm command to run a script in the package.json file. This script will automatically run the local server and prepare the static files. Install the npm dependencies, install the requirements, initialize your database, load the default sites fixtures, and run the dev server: cd mysite npm install pip install -r requirements.txt ./manage.py migrate ./manage.py loaddata sites npm run dev Browse to http://localhost:3000/ Collect Static Files for Deployment To collect the static files run: ./manage.py collectstatic Old Local Development Steps If you are using pinax-theme-bootstrap, you will run the local server by using the Django runserver command. Install the requirements, initialize your database, load the default sites fixtures, and run the dev server: cd mysite pip install -r requirements.txt chmod +x manage.py ./manage.py migrate ./manage.py loaddata sites ./manage.py runserver Browse to http://127.0.0.1:8000/ You now have a running Django site complete with account management and pinax-templates or pinax-theme-bootstrap. Adding Another Pinax App Add the new app name to requirements.txt : # other apps pinax-amazing==2.0.1, and install requirements once again. pip install -r requirements.txt If you are using pipenv , you know to use this instead: pipenv install pinax-amazing==2.0.1 Next, modify settings.py by adding your app to INSTALLED_APPS : INSTALLED_APPS = [ # other apps \"pinax-amazing\", ] This is a good time to make any additional changes to settings.py if needed for the new app. Be sure to establish database tables for the new app: ./manage.py migrate Finally, modify your project urls.py with urls for the new app: urlpatterns = [ # other urls url(r\"^amazing/\", include(\"pinax.amazing.urls\", namespace=\"pinax_amazing\")), ] This is a good time to adjustment templates for the new app, if needed.","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"Make sure you've read What is Pinax? to get a conceptual overview of Pinax. We strongly recommend running Pinax (or indeed, any Django) projects in a virtual environment: pip install virtualenv virtualenv mysiteenv source mysiteenv/bin/activate pip install pinax-cli pinax start account mysite If you are using pipenv try this instead: mkdir mysite cd mysite pipenv --three pipenv shell pip install pinax-cli pinax start account mysite --location . NOTE : If you are wondering what pinax start actually does, it is equivalent to: pip install Django==2.0 django-admin startproject --template=https://github.com/pinax/pinax-starter-projects/zipball/account mysite","title":"Quick Start"},{"location":"quick_start/#modern-local-development-steps","text":"If you are using pinax-templates, you will use an npm command to run a script in the package.json file. This script will automatically run the local server and prepare the static files. Install the npm dependencies, install the requirements, initialize your database, load the default sites fixtures, and run the dev server: cd mysite npm install pip install -r requirements.txt ./manage.py migrate ./manage.py loaddata sites npm run dev Browse to http://localhost:3000/","title":"Modern Local Development Steps"},{"location":"quick_start/#collect-static-files-for-deployment","text":"To collect the static files run: ./manage.py collectstatic","title":"Collect Static Files for Deployment"},{"location":"quick_start/#old-local-development-steps","text":"If you are using pinax-theme-bootstrap, you will run the local server by using the Django runserver command. Install the requirements, initialize your database, load the default sites fixtures, and run the dev server: cd mysite pip install -r requirements.txt chmod +x manage.py ./manage.py migrate ./manage.py loaddata sites ./manage.py runserver Browse to http://127.0.0.1:8000/ You now have a running Django site complete with account management and pinax-templates or pinax-theme-bootstrap.","title":"Old Local Development Steps"},{"location":"quick_start/#adding-another-pinax-app","text":"Add the new app name to requirements.txt : # other apps pinax-amazing==2.0.1, and install requirements once again. pip install -r requirements.txt If you are using pipenv , you know to use this instead: pipenv install pinax-amazing==2.0.1 Next, modify settings.py by adding your app to INSTALLED_APPS : INSTALLED_APPS = [ # other apps \"pinax-amazing\", ] This is a good time to make any additional changes to settings.py if needed for the new app. Be sure to establish database tables for the new app: ./manage.py migrate Finally, modify your project urls.py with urls for the new app: urlpatterns = [ # other urls url(r\"^amazing/\", include(\"pinax.amazing.urls\", namespace=\"pinax_amazing\")), ] This is a good time to adjustment templates for the new app, if needed.","title":"Adding Another Pinax App"},{"location":"release_process/","text":"Release Process Script https://github.com/pinax/pinax/blob/master/check.py can help identify which apps need releases. Be sure to install requirements as specified. make sure all issues are triaged make sure all pull-requests are triaged establish new version number based on semver update docs/changelog.md make sure AUTHORS is up-to-date for new contributions update setup.py confirm Travis CI passed do a release on GitHub with tag of form v1.2.3 and release name of 1.2.3 , using the changelog entry for the release notes do git clean -fdx publish to pypi with python setup.py sdist bdist_wheel upload Note: if this command fails with error: invalid command 'bdist_wheel' you need to install \"wheel\" in your virtualenv: `$ pip install wheel` see also https://github.com/pinax/pinax/issues/113","title":"Release Process"},{"location":"release_process/#release-process","text":"Script https://github.com/pinax/pinax/blob/master/check.py can help identify which apps need releases. Be sure to install requirements as specified. make sure all issues are triaged make sure all pull-requests are triaged establish new version number based on semver update docs/changelog.md make sure AUTHORS is up-to-date for new contributions update setup.py confirm Travis CI passed do a release on GitHub with tag of form v1.2.3 and release name of 1.2.3 , using the changelog entry for the release notes do git clean -fdx publish to pypi with python setup.py sdist bdist_wheel upload Note: if this command fails with error: invalid command 'bdist_wheel' you need to install \"wheel\" in your virtualenv: `$ pip install wheel` see also https://github.com/pinax/pinax/issues/113","title":"Release Process"},{"location":"ways_to_contribute/","text":"Ways To Contribute/ What We Need Help With Help Others! If you would like to help others who are just starting to contribute to Pinax, you can do the following: Hang out in Slack and help answer questions! Watch the Pinax repositories for issues or pull request you could help with! When you encounter a bug/have an idea for a feature/encounter missing documentation that could easily be fixed, create first-timers-only issues like this one for people wanting to make their first OSS contribution! If you need help creating this sort of issue, please ping @KatherineMichel on GitHub or @katherinemichel in Slack. Contribute To The Community! Write blog posts like these ! Host a Pinax Hangout ! Help us contribute to our existing documentation and write new documentation! You can find links to each app\u2019s/starter project\u2019s documentation in the README of the app/starter project. Write tutorials! If there\u2019s an app or starter project you know well, write a tutorial and show others how to use it, what features it has, etc. Contribute Code! Write tests! If you have time to fix any of our GitHub issues (especially those labelled up-for-grabs ) we would greatly appreciate your help! Create a new starter project which showcases how to use any of our Pinax apps (or a combination of them). This doesn\u2019t have to be anything new or original. You could for example pick an existing website like Facebook and try to rebuild it with Pinax components. Write new Pinax apps! If while building your starter project you notice that an app is missing we would love for you to let us know about your idea or build the app yourself.","title":"Ways to Contribute"},{"location":"ways_to_contribute/#ways-to-contribute-what-we-need-help-with","text":"","title":"Ways To Contribute/ What We Need Help With"},{"location":"ways_to_contribute/#help-others","text":"If you would like to help others who are just starting to contribute to Pinax, you can do the following: Hang out in Slack and help answer questions! Watch the Pinax repositories for issues or pull request you could help with! When you encounter a bug/have an idea for a feature/encounter missing documentation that could easily be fixed, create first-timers-only issues like this one for people wanting to make their first OSS contribution! If you need help creating this sort of issue, please ping @KatherineMichel on GitHub or @katherinemichel in Slack.","title":"Help Others!"},{"location":"ways_to_contribute/#contribute-to-the-community","text":"Write blog posts like these ! Host a Pinax Hangout ! Help us contribute to our existing documentation and write new documentation! You can find links to each app\u2019s/starter project\u2019s documentation in the README of the app/starter project. Write tutorials! If there\u2019s an app or starter project you know well, write a tutorial and show others how to use it, what features it has, etc.","title":"Contribute To The Community!"},{"location":"ways_to_contribute/#contribute-code","text":"Write tests! If you have time to fix any of our GitHub issues (especially those labelled up-for-grabs ) we would greatly appreciate your help! Create a new starter project which showcases how to use any of our Pinax apps (or a combination of them). This doesn\u2019t have to be anything new or original. You could for example pick an existing website like Facebook and try to rebuild it with Pinax components. Write new Pinax apps! If while building your starter project you notice that an app is missing we would love for you to let us know about your idea or build the app yourself.","title":"Contribute Code!"},{"location":"what_is_pinax/","text":"What is Pinax? Pinax is an open source ecosystem of reusable Django apps, themes, and starter project templates. It takes care of the things that many sites have in common so you can focus on what makes your site different. Pinax provides: Standard project layout for consistency and easy deployment Starter projects that can be used as the basis for any Django website as well as some tailored-to-community sites, company sites, intranets and sites in closed beta Reusable apps providing both back-end functionality and user-facing components Default templates to enable quick prototyping Pinax has been used for everything from social networks to conference websites, and from intranets to online games. Because it's an entire ecosystem you can't just download Pinax and try it out, but there are starter projects you can do this with (see Quick Start ). A starter project is a Django project template that comes with a bunch of apps already integrated with templates, etc. Some starter projects are intended to just lay a foundation for your site. For example the \"account starter project\" or pinax-project-account , gives you user signup (optionally closed), login, password change and reset, basic user preferences all with an easy-to-customize Bootstrap-based UI. Hundreds of sites have been built on pinax-project-account even if they otherwise have nothing else in common or even use any other Pinax apps. Some starter projects are more designed to be demos of how to use a particular reusable app or set of apps. Yet other starter projects are designed to be out-of-the-box, fully-functional sites, ready to deploy (although we don't have many of these yet). After you've started your Django project with a Pinax starter project, it is quite common to add other apps from the Pinax ecosystem. But the apps in Pinax are just regular Django apps. Django apps don't have to be \"Pinax\" apps to be added to a Pinax starter project. Furthermore, you can use the apps in the Pinax ecosystem even if you didn't start with a Pinax starter project. In short, you can use as little or as much of Pinax as you want. Pinax is opinionated but it's just Django. It's not designed to shield you from Django. With Pinax, you're always just doing regular Django development. You just have a lot of existing code to help you.","title":"What is Pinax?"},{"location":"what_is_pinax/#what-is-pinax","text":"Pinax is an open source ecosystem of reusable Django apps, themes, and starter project templates. It takes care of the things that many sites have in common so you can focus on what makes your site different. Pinax provides: Standard project layout for consistency and easy deployment Starter projects that can be used as the basis for any Django website as well as some tailored-to-community sites, company sites, intranets and sites in closed beta Reusable apps providing both back-end functionality and user-facing components Default templates to enable quick prototyping Pinax has been used for everything from social networks to conference websites, and from intranets to online games. Because it's an entire ecosystem you can't just download Pinax and try it out, but there are starter projects you can do this with (see Quick Start ). A starter project is a Django project template that comes with a bunch of apps already integrated with templates, etc. Some starter projects are intended to just lay a foundation for your site. For example the \"account starter project\" or pinax-project-account , gives you user signup (optionally closed), login, password change and reset, basic user preferences all with an easy-to-customize Bootstrap-based UI. Hundreds of sites have been built on pinax-project-account even if they otherwise have nothing else in common or even use any other Pinax apps. Some starter projects are more designed to be demos of how to use a particular reusable app or set of apps. Yet other starter projects are designed to be out-of-the-box, fully-functional sites, ready to deploy (although we don't have many of these yet). After you've started your Django project with a Pinax starter project, it is quite common to add other apps from the Pinax ecosystem. But the apps in Pinax are just regular Django apps. Django apps don't have to be \"Pinax\" apps to be added to a Pinax starter project. Furthermore, you can use the apps in the Pinax ecosystem even if you didn't start with a Pinax starter project. In short, you can use as little or as much of Pinax as you want. Pinax is opinionated but it's just Django. It's not designed to shield you from Django. With Pinax, you're always just doing regular Django development. You just have a lot of existing code to help you.","title":"What is Pinax?"},{"location":"how-tos/deploy-to-heroku/","text":"Deploying to Heroku This document assumes you have followed our Quick Start guide. First, create a Heroku app: heroku create Set the buildpack for the app to use Python: heroku buildpacks:set git://github.com/heroku/heroku-buildpack-python.git Setting the buildpack explicitly is required due to the buildpack detection ordering. Our projects include a package.json file which will trick Heroku in thinking your project is a Node.js app. It should identify it as a Python app. Setting up your project In your project add the following to your requirements.txt : django-toolbelt Create a file named Procfile in your project with the following content: web: gunicorn --log-file - mysite.wsgi In your settings.py change: DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": \"dev.db\", } } to: import dj_database_url DATABASES = { \"default\": dj_database_url.config() } In your mysite/wsgi.py change: application = get_wsgi_application() to: from dj_static import Cling, MediaCling application = Cling(MediaCling(get_wsgi_application())) Commit to git Add everything to git and commit: git add . git commit -m \"added Heroku support\" Deploy to Heroku To deploy to Heroku you use git : git push heroku master Run migrations: heroku run python manage.py migrate","title":"Deploying to Heroku"},{"location":"how-tos/deploy-to-heroku/#deploying-to-heroku","text":"This document assumes you have followed our Quick Start guide. First, create a Heroku app: heroku create Set the buildpack for the app to use Python: heroku buildpacks:set git://github.com/heroku/heroku-buildpack-python.git Setting the buildpack explicitly is required due to the buildpack detection ordering. Our projects include a package.json file which will trick Heroku in thinking your project is a Node.js app. It should identify it as a Python app.","title":"Deploying to Heroku"},{"location":"how-tos/deploy-to-heroku/#setting-up-your-project","text":"In your project add the following to your requirements.txt : django-toolbelt Create a file named Procfile in your project with the following content: web: gunicorn --log-file - mysite.wsgi In your settings.py change: DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.sqlite3\", \"NAME\": \"dev.db\", } } to: import dj_database_url DATABASES = { \"default\": dj_database_url.config() } In your mysite/wsgi.py change: application = get_wsgi_application() to: from dj_static import Cling, MediaCling application = Cling(MediaCling(get_wsgi_application()))","title":"Setting up your project"},{"location":"how-tos/deploy-to-heroku/#commit-to-git","text":"Add everything to git and commit: git add . git commit -m \"added Heroku support\"","title":"Commit to git"},{"location":"how-tos/deploy-to-heroku/#deploy-to-heroku","text":"To deploy to Heroku you use git : git push heroku master Run migrations: heroku run python manage.py migrate","title":"Deploy to Heroku"},{"location":"how-tos/ldap/","text":"LDAP Integration In your requirements.txt , add: django-auth-ldap==1.2.6 In your settings.py , add: AUTHENTICATION_BACKENDS = [ \"django_auth_ldap.backend.LDAPBackend\", # ldap will authenticate before your local database \"account.auth_backends.UsernameAuthenticationBackend\", ] import ldap from django_auth_ldap.config import LDAPSearch AUTH_LDAP_SERVER_URI = \"ldap://127.0.0.1\" AUTH_LDAP_USER_SEARCH = LDAPSearch( \"ou=users,dc=example,dc=com\", ldap.SCOPE_SUBTREE, \"(uid=%(user)s)\" ) The AUTH_LDAP_* settings will vary based on how LDAP is configured. For more information, see the django-auth-ldap documentation .","title":"LDAP Integration"},{"location":"how-tos/ldap/#ldap-integration","text":"In your requirements.txt , add: django-auth-ldap==1.2.6 In your settings.py , add: AUTHENTICATION_BACKENDS = [ \"django_auth_ldap.backend.LDAPBackend\", # ldap will authenticate before your local database \"account.auth_backends.UsernameAuthenticationBackend\", ] import ldap from django_auth_ldap.config import LDAPSearch AUTH_LDAP_SERVER_URI = \"ldap://127.0.0.1\" AUTH_LDAP_USER_SEARCH = LDAPSearch( \"ou=users,dc=example,dc=com\", ldap.SCOPE_SUBTREE, \"(uid=%(user)s)\" ) The AUTH_LDAP_* settings will vary based on how LDAP is configured. For more information, see the django-auth-ldap documentation .","title":"LDAP Integration"},{"location":"how-tos/release-starter-project/","text":"Releasing a Starter Project In an effort to communicate completeness and bring some stability to our starter projects, we tag releases. Semantic versioning applies less to starter projects than it does to apps as things like backwards-incompatibility are a non-issue. However, for the sake of consistency we should adhere to keeping close to it. Versioning Rules new starter projects remain untagged until they can at least run locally, good enough for demos and testing once a starter project can run for demos, start minor releases at 0.1.0 once a starter project is used to create a site that is running in production it gets bumped to 1.0.0 increment patch numbers if any change is fixing a bug increment minor numbers for any feature changes or version bumps of dependencies that are relatively minor increment major numbers for any major work done Tagging To apply a version, we just use git tags with the project branch slug as a prefix: git tag account-0.1.0 git push --tags Update Project Manifest After creating a new release, update projects.json and add the url to the archive into the project.json payload. { \"version\": 1, \"projects\": { \"zero\": { \"url\": \"https://github.com/pinax/pinax-starter-projects/zipball/zero\", \"process-files\": [\"webpack.config.js\", \"PROJECT_README.md\"], \"releases\": [ \"https://api.github.com/repos/pinax/pinax-starter-projects/tarball/zero-1.0.0\" ] } } } By using Semantic Versioning the releases should sort easily so that the pinax command line tool can sort them easily to install the latest.","title":"Releasing a Starter Project"},{"location":"how-tos/release-starter-project/#releasing-a-starter-project","text":"In an effort to communicate completeness and bring some stability to our starter projects, we tag releases. Semantic versioning applies less to starter projects than it does to apps as things like backwards-incompatibility are a non-issue. However, for the sake of consistency we should adhere to keeping close to it.","title":"Releasing a Starter Project"},{"location":"how-tos/release-starter-project/#versioning-rules","text":"new starter projects remain untagged until they can at least run locally, good enough for demos and testing once a starter project can run for demos, start minor releases at 0.1.0 once a starter project is used to create a site that is running in production it gets bumped to 1.0.0 increment patch numbers if any change is fixing a bug increment minor numbers for any feature changes or version bumps of dependencies that are relatively minor increment major numbers for any major work done","title":"Versioning Rules"},{"location":"how-tos/release-starter-project/#tagging","text":"To apply a version, we just use git tags with the project branch slug as a prefix: git tag account-0.1.0 git push --tags","title":"Tagging"},{"location":"how-tos/release-starter-project/#update-project-manifest","text":"After creating a new release, update projects.json and add the url to the archive into the project.json payload. { \"version\": 1, \"projects\": { \"zero\": { \"url\": \"https://github.com/pinax/pinax-starter-projects/zipball/zero\", \"process-files\": [\"webpack.config.js\", \"PROJECT_README.md\"], \"releases\": [ \"https://api.github.com/repos/pinax/pinax-starter-projects/tarball/zero-1.0.0\" ] } } } By using Semantic Versioning the releases should sort easily so that the pinax command line tool can sort them easily to install the latest.","title":"Update Project Manifest"}]}